extends layouts/main.pug

block stylehead
	meta(name='boardId' content=board._id)
	link(rel='stylesheet' href='/bower_components/summernote/dist/summernote.css')
	link(rel='stylesheet' href='/bower_components/toastr/toastr.css')
	link(rel='stylesheet' href='/styles/smt-bootstrap.css')
	style(type='text/css').
		.modal {
		    overflow-y: scroll;
		}
		.navbar-lower {
			top: 50px;
		    z-index: 1029;
		    background-color : rgb(253,224,193);
		}

		.btn {
			margin-left: 1px;
			margin-right: 1px;
		}

		.card-container {
			position: absolute;
		}

		.label-reason {
			font-size: 15px;
			font-weight: 9000;
			font-family: "Times New Roman", Georgia, Serif;
			background-color: #22BE34;
			padding: 5px;
			color : white;
			border-radius: 60px;
		}

		.label-co-reason {
			font-size: 15px;
			font-weight: 9000;
			font-family: "Times New Roman", Georgia, Serif;
			background-color: #3AC0FF;
			padding: 5px;
			color : white;
			border-radius: 60px;
		}

		.label-objection {
			font-size: 15px;
			font-weight: 9000;
			font-family: "Times New Roman", Georgia, Serif;
			background-color: #D01919;
			padding: 5px;
			color : white;
			border-radius: 60px;
		}

		.label-rebuttal {
			font-size: 15px;
			font-weight: 9000;
			font-family: "Times New Roman", Georgia, Serif;
			background-color: #FF851B;
			padding: 5px;
			color : white;
			border-radius: 60px;
		}

		[v-cloak] {
			display : none;
		}

		.fa-spin-custom, .glyphicon-spin {
		    -webkit-animation: spin 1000ms infinite linear;
		    animation: spin 1000ms infinite linear;
		}
		@-webkit-keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}
		@keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}

		.submit-button {
			width: 8%;
			margin-right: 2px;
		}

		.delete-card-button {
			width: 7%;
		}

		.help-inline {
			color: #d01919;
		}

		.collaborate-button {
			width: 60px;
		}

block content
	div(class='navbar navbar-fixed-top navbar-default navbar-lower' role='navigation')
		div(class='container')
			div(class='row')
				div(class='col-md-12')
					div(class='pull-left')
						div(class='row')
							


					div(class='pull-right')
						div(class='row')
							div(class='col-md-6')
								select(@change="scaleChange($event)" class='form-control navbar-btn input-sm')
									option(value="1") 100%
									option(value="0.9") 90%
									option(value="0.8") 80%
									option(value="0.7") 70%
									option(value="0.6") 60%
									option(value="0.5") 50%
									option(value="0.4") 40%
									option(value="0.3") 30%
									option(value="0.2") 20%
							div(class='col-md-6')
								if isUserBoardOwner && user != null
									button(v-bind:disabled="!isUserOwnerOfBoard" class='btn btn-primary navbar-btn btn-sm' @click="openCreateBoardToCreateContention()") Buat Kesimpulan
								else 
									button( 
										class='btn btn-danger navbar-btn btn-sm'
										data-toggle='popover',
										data-content='Hanya pemilik board yang bisa buat kesimpulan'
										data-trigger='hover'
										data-placement="left" 
									) Anda tidak bisa buat kesimpulan
	
	div(class='panel panel-default' style='width : 250px; position: fixed; top: 115px; left: 15px; z-index: 100;')
		div(class='panel-body')
			button(
				class='btn btn-primary navbar-btn btn-sm btn-block' 
				data-toggle='popover',
				title=board.title
				data-content='oleh ' + board.user.name
				data-trigger='hover'
				v-cloak
			) Mengenai Board Ini
				
			if !isUserBoardOwner && user != null
				div()
					
					button(
						class='btn btn-danger navbar-btn btn-sm btn-block' 
						data-toggle='popover',
						data-content='Permintaan menjadi kolaborator anda ditolak'
						data-trigger='hover'
						v-if="!isUserCollaborator && !isUserInRequestingToBeCollaborator && isUserCollaboratorRequestRejected"
						v-cloak
					) Permintaan anda ditolak

					button(
						class='btn btn-warning navbar-btn btn-sm btn-block' 
						data-toggle='popover',
						data-content='Menunggu persetujuan pemilik board'
						data-trigger='hover'
						v-if="!isUserCollaborator && isUserInRequestingToBeCollaborator"
						v-cloak
					) Menunggu persetujuan

					button(
						class='btn btn-success navbar-btn btn-sm btn-block' 
						data-toggle='popover',
						data-content='Jika anda ingin gabung ke board ini, klik tombol ini'
						data-trigger='hover'
						v-if="!isUserCollaborator && !isUserInRequestingToBeCollaborator && !isUserCollaboratorRequestRejected && !loadings.requestToBeCollaborator"
						@click="requestToJoinBoard()"
						v-cloak
					) Gabung ke board ini
					button(
						class='btn btn-success navbar-btn btn-sm btn-block' 
						v-if="loadings.requestToBeCollaborator"
						v-bind:disabled="loadings.requestToBeCollaborator"
					) 
						span(class="glyphicon glyphicon-refresh glyphicon-spin")

					button(
						class='btn btn-success navbar-btn btn-sm btn-block' 
						data-toggle='popover',
						data-content='Anda Sudah Tergabung Ke Board Ini, anda bisa membuat card di board ini'
						data-trigger='hover'
						v-if="isUserCollaborator && !isUserInRequestingToBeCollaborator && !isUserCollaboratorRequestRejected"
						v-cloak
					) Sudah Tergabung Ke Board Ini

			else if user == null
				div()
			else if user && isUserBoardOwner
				div()
					button(
						class='btn btn-success navbar-btn btn-sm btn-block' 
						data-toggle='popover',
						data-content='Board Anda'
						data-trigger='hover'
						v-cloak
					) Board Anda

				div()
					button(v-cloak class='btn btn-warning navbar-btn btn-sm btn-block' @click="openCollaboratorsModal()") Permintaan Kolaborator 
						span(class='badge' v-cloak) {{ numberOfCollaboratorsRequest }}
			
			if !isUserBoardOwner && user != null
				
				button(
					style="background-color: #ceb300; color: white;"
					@click="bookmarkThisBoard()"
					class='btn navbar-btn btn-sm btn-block' 
					data-toggle='popover',
					data-content='Tandai board ini agar anda mudah untuk menemukannya nanti'
					data-trigger='hover'
					v-cloak
					v-if="!isUserBookmarkedThisBoard && !loadings.bookmarkRequest"
				) Tandai Board Ini

				button(
					style="background-color: #020660; color: white;"
					@click="removeBookmarkThisBoard()"
					class='btn navbar-btn btn-sm btn-block' 
					data-toggle='popover',
					data-content='Anda sudah mendandai board ini'
					data-trigger='hover'
					v-cloak
					v-if="isUserBookmarkedThisBoard && !loadings.bookmarkRequest"
				) Hilangkan tanda dari board ini

				button(
					class='btn btn-default navbar-btn btn-sm btn-block' 
					v-if="loadings.bookmarkRequest"
				)
					span(class="glyphicon glyphicon-refresh glyphicon-spin")

	div(class='container-fluid')
		div(class='row')
			div(class="col-md-12")
				div(id="argumen-container" style="margin-top:100px; min-width: 10000px; min-height:5000px;")
					draggable-card(
						v-for="(card, index) in cards" 
						v-bind:user="user" 
						v-bind:card="card" 
						v-bind:index="index" 
						v-bind:scale="scale" 
						v-bind:leftsubtraction="leftSubtractValue" 
						v-bind:topsubtraction="topSubtractValue"
						v-bind:is-current-user-collaborator-of-board="isUserCollaborator" 
						v-bind:is-user-board-owner="isUserOwnerOfBoard" 
						v-on:drag-stop="saveCardPositionChange" 
						v-on:delete-card="openModalAndSetCardToBeDeleted" 
						v-on:create-related-card="createRelatedCard"
						v-on:connection-created="addCardConnection"
						v-on:card-destroyed="removeConnectionByCardId"
						v-on:change-card="openModalToChangeCard"
					) 
			
	div(class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="create-card-modal")
		div(class="modal-dialog modal-lg" role="document")
			div(class="modal-content")
				div(class="modal-header")
					h4() {{ createFormTitle }}
				div(class="modal-body")
					div(class='form-group has-feedback' v-bind:class="{ 'has-error' : formsError.createCard.title.error }")
						label(class='control-label') Isi
						textarea(class='form-control' v-model="forms.createCard.title" rows="6")
						p(class='help-inline' style="margin-top: 5px;" v-if="formsError.createCard.title.error") {{ formsError.createCard.title.message }}
					div(class='form-group')
						label(class='label-control') Catatan 
							span(style='font-size:11px;') (Anda bisa menambahkan catatan berupa penjelasan, referensi, link, gambar, link video)
						div(id="content-editor")
					div(class='form-group')
						button(class='btn btn-success btn-sm submit-button' @click="createCard($event)" v-if="!loadings.cardSubmit") Simpan
						button(class='btn btn-success btn-sm submit-button' v-if="loadings.cardSubmit")
							span(class="glyphicon glyphicon-refresh glyphicon-spin")

						button(class='btn btn-danger btn-sm' v-if="!loadings.cardSubmit" @click="closeCreateCardModal()") Tutup
						button(class='btn btn-danger btn-sm' v-if="loadings.cardSubmit" v-bind:disabled="loadings.cardSubmit") Tutup

	div(class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="delete-card-confirmation-modal")
		div(class="modal-dialog modal-md" role="document")
			div(class="modal-content")
				div(class="modal-header")
					h4() Hapus Card Ini ?
				div(class="modal-body")
					div(class='row')
						div(class='col-md-12')

							button(class='btn btn-success btn-sm' v-if="!loadings.cardDelete" @click="closeDeleteCardConfirmationModal()") Tidak
							button(class='btn btn-success btn-sm' v-if="loadings.cardDelete" v-bind:disabled="loadings.cardDelete") Tidak

							button(v-if="!loadings.cardDelete" class='btn btn-danger btn-sm delete-card-button' @click="deleteCardByIndex()") Ya
							button(v-if="loadings.cardDelete" v-bind:disabled="loadings.cardDelete" class='btn btn-danger btn-sm delete-card-button')
								span(class="glyphicon glyphicon-refresh glyphicon-spin")

	if isUserBoardOwner

		div(class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="collaborator-modal")
			div(class="modal-dialog modal-md" role="document")
				div(class="modal-content")
					div(class="modal-body")
						div(class='row')
							div(class='col-md-12')
								h5() Kolaborator
								table(class='table table-default table-striped table-bordered')
									thead()
										tr()
											th(class='text-center') Gambar 
											th(class='text-center') Nama
									tbody(v-if="boardCollaborators.length")
										tr(v-for="collaborator in boardCollaborators")
											td(class='text-center')
												img(v-bind:src="collaborator.profilePic")
											td(class='text-center') {{ collaborator.name }}
									tbody(v-if="!boardCollaborators.length")
										tr()
											td(colspan='2' class='text-center') Tidak Ada Kolaborator
							div(class='col-md-12')
								h5() Permintaan Kolaborator
								
								p(style="font-size: 13px; color: red;") Sekali anda memasukan seseorang sebagai kolaborator, anda tidak bisa mengeluarkannya, perhitungkan sebelum menerima seseorang. Hal ini dilakukan agar jika terjadi debat, pemilik board tidak bisa mengeluarkan seorang kolaborator yang lebih unggul dalam argumennya.

								table(class='table table-default table-striped table-bordered')
									thead()
										tr()
											th(class='text-center') Gambar
											th(class='text-center') Nama
											th(class='text-center') 
									tbody(v-if="collaboratorsRequest.length")
										tr(v-for="(collaborator, index) in collaboratorsRequest")
											td(class='text-center')
												img(v-bind:src="collaborator.profilePic")
											td(class='text-center') {{ collaborator.name }}
											td(class='text-center')
												
												button(v-if="!loadings.acceptJoin && !loadings.rejectJoin" class='btn btn-success btn-sm collaborate-button' @click="acceptCollaboratorRequest(collaborator.userId, index)") Terima
												button(v-if="loadings.rejectJoin || (index != tobe.acceptedCollaboratorRequestIndex && null != tobe.acceptedCollaboratorRequestIndex)" v-bind:disabled="loadings.rejectJoin || (index != tobe.acceptedCollaboratorRequestIndex && null != tobe.acceptedCollaboratorRequestIndex)" class='btn btn-success btn-sm collaborate-button') Terima
												button(v-if="loadings.acceptJoin && index == tobe.acceptedCollaboratorRequestIndex" class='btn btn-success btn-sm collaborate-button')
													span(class="glyphicon glyphicon-refresh glyphicon-spin")

												button(v-if="!loadings.acceptJoin && !loadings.rejectJoin" class='btn btn-danger btn-sm collaborate-button' @click="rejectCollaboratorRequest(collaborator.userId, index)") Tolak
												button(v-if="loadings.acceptJoin || (index != tobe.rejectedCollaboratorRequestIndex && tobe.rejectedCollaboratorRequestIndex != null)" v-bind:disabled="loadings.acceptJoin || (index != tobe.rejectedCollaboratorRequestIndex && tobe.rejectedCollaboratorRequestIndex != null)" class='btn btn-danger btn-sm collaborate-button') Tolak
												button(v-if="loadings.rejectJoin && index == tobe.rejectedCollaboratorRequestIndex" class='btn btn-danger btn-sm collaborate-button')
													span(class="glyphicon glyphicon-refresh glyphicon-spin")
									
									tbody(v-if="!collaboratorsRequest.length")
										tr()
											td(colspan='3' class='text-center') Tidak Ada Permintaan
							div(class='col-md-12')
								div(class='pull-right')
									button(class='btn btn-danger btn-sm' @click="hideCollaboratorsModal()") Tutup

block scriptHead
	script(type='text/javascript' src='/bower_components/jquery/dist/jquery.min.js')
	script(type='text/javascript' src='/bower_components/jquery-ui/jquery-ui.min.js')
	

block script
	script(type='text/javascript' src='/bower_components/bootstrap/dist/js/bootstrap.js')
	script(type='text/javascript' src='/bower_components/vue/dist/vue.js')
	script(type='text/javascript' src='/bower_components/summernote/dist/summernote.js')
	script(type='text/javascript' src='/bower_components/summernote/lang/summernote-id-ID.js')
	script(type='text/javascript' src='/bower_components/jsplumb/dist/js/jsplumb.js')
	script(type='text/javascript' src='/bower_components/ramda/dist/ramda.js')
	script(type='text/javascript' src='/bower_components/socket.io-client/dist/socket.io.js')
	script(type='text/javascript' src='/bower_components/toastr/toastr.js')
	script(type='text/javascript' src='/models/board.js')
	script(type='text/javascript' src='/models/card.js')
	script(type='text/javascript' src='/models/user.js')
	script(type='text/javascript' src='/models/relation.js')

	script(type='text/javascript' src='/forms/create-card.form.js')

	script(type='text/javascript' src='/vue_components/draggable-card.component.js')

	script(type='text/javascript').
		
		(function() {

			var initBoard = new Board();

			new Vue({
				el: '#app',
				data : {
					user : new User(),
					board : initBoard,
					cards : [],
					connections : [],
					collaboratorsRequest : [],
					boardCollaborators : [],
					formStatus : 'create-contention',
					modals : {
						createCard : null,
						deleteCardConfirmation : null,
						collaborator : null
					},
					forms : {
						createCard : {
							title : null
						}
					},
					editor : null,
					tobe : {
						relatedId : null,
						deletedCardIndex : 0,
						sendCardType : 'contention',
						changedCardIndex : 0,
						rejectedCollaboratorRequestIndex : null,
						acceptedCollaboratorRequestIndex : null,
					},
					sockets : {
						card : null
					},
					loadings : {
						cardSubmit : false,
						requestToBeCollaborator : false,
						cardDelete : false,
						bookmarkRequest : false,
						acceptJoin : false,
						rejectJoin : false,
					},
					formsError : {
						createCard : {
							title : {
								error : false,
								message : ''
							}
						}
					},
					scale : 1,
					leftSubtractValue : 0,
					topSubtractValue : 0,
					isUserBookmarkedThisBoard : false,
					isUserCollaborator : false,
					isUserInRequestingToBeCollaborator : false,
					isUserLoggedIn : false,
					isUserOwnerOfBoard : false,
					isUserCollaboratorRequestRejected : false,
					boardInitialization : true
				},
				components : {
					'draggable-card' : draggableCardComponent
				},
				methods : {
					getUser : function() {
						
						var vm = this;

						var url = '/api/me';

						var request = $.get({
							url :url
						})

						return request.then(function(user) {
							vm.user
								.setId(user._id)
								.setName(user.name)
						});
					},
					getBoardData : function() {
						
						// set collaboratorIds

						var vm = this;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId;

						var request = $.get({
							url : url
						})

						return request
							.then(function(board) {

								var collaboratorIds = board.collaborators.map(function(collaborator) {
									return collaborator.userId;
								})

								var boardCreator = new User();

								boardCreator
									.setName(board.user.name)
									.setId(board.user.id);

								vm.board
									.setId(board._id)
									.setCollaboratorIds(collaboratorIds)
									.setUser(boardCreator);
							
							})
							.catch(function(error) {
								console.log(error)
							})
					},
					getCards : function() {
						var vm = this;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/cards';

						var request = $.get({
							url : url
						})

						return request
							.then(function(cards) {
								cards.forEach(function(card) {
									
									var cardInstance = new Card();
									
									var creatorOfCard = new User();
									creatorOfCard
										.setId(card.creator.id)
										.setName(card.creator.name)

									var cardRelation = new Relation();
										cardRelation
											.setTo(card.related.to)
											.setType(card.related.type);

									cardInstance
										.setId(card._id)
										.setTitle(card.title)
										.setContent(card.content)
										.setType(card.type)
										.setCreator(creatorOfCard)
										.setLeft(card.left)
										.setTop(card.top)
										.setRelation(cardRelation);

									vm.cards.push(cardInstance);
								})
							})
							.catch(function(error) {
								console.log(error)
							})
					},
					getViewBoardPageData : function() {

						var vm = this;

						var boardId = $('meta[name=boardId]').attr("content");

						var url = '/api/page-data/view-board';

						var request = $.get({
							url : url,
							data : {
								boardId : boardId
							}
						});

						return request
							.then(function(data) {
								
								// set boardId
								vm.board.setId(data.boardId);

								// set User
								if(data.isUserLoggedIn) {
									vm.user
										.setId(data.user._id)
										.setName(data.user.name)
								}
								
								// set user state from response
								vm.isUserBookmarkedThisBoard = data.isUserBookmarkedThisBoard;
								vm.isUserCollaborator = data.isUserCollaborator;
								vm.isUserInRequestingToBeCollaborator = data.isUserInRequestingToBeCollaborator;
								vm.isUserLoggedIn = data.isUserLoggedIn;
								vm.isUserOwnerOfBoard = data.isUserOwnerOfBoard;
								vm.isUserCollaboratorRequestRejected = data.isUserCollaboratorRequestRejected;

								// if user is board owner, so get boardCollaborators and board collaborator request
								if(data.isUserOwnerOfBoard) {
									
									data.boardCollaboratorsRequest.forEach(function(request) {
										vm.collaboratorsRequest.push(request);
									});

									data.boardCollaborators.forEach(function(collaborator) {
										vm.boardCollaborators.push(collaborator);
									})
								}

								// get card data
								data.boardCards.forEach(function(card) {
									
									var cardInstance = new Card();
									
									var creatorOfCard = new User();
									creatorOfCard
										.setId(card.creator.id)
										.setName(card.creator.name)

									var cardRelation = new Relation();
										cardRelation
											.setTo(card.related.to)
											.setType(card.related.type);

									cardInstance
										.setId(card._id)
										.setTitle(card.title)
										.setContent(card.content)
										.setType(card.type)
										.setCreator(creatorOfCard)
										.setLeft(card.left)
										.setTop(card.top)
										.setRelation(cardRelation);

									vm.cards.push(cardInstance);
								});
							})
							.catch(function(error) {
								alert('Error Happen');
								console.log(error);
							});
					},
					openCreateBoardToCreateContention : function() {
						this.formStatus = 'create-contention';
						this.tobe.sendCardType = 'contention';

						this.openCreateCardModal();
					},
					openCreateCardModal : function() {
						this.modals.createCard.modal({
							keyboard : false,
							backdrop : 'static'
						})
					},
					closeCreateCardModal : function() {
						this.modals.createCard.modal('hide');
					},
					openDeleteCardConfimationModal : function() {
						this.modals.deleteCardConfirmation.modal({
							backdrop : 'static',
							keyboard : false
						})
					},
					closeDeleteCardConfirmationModal : function() {
						this.modals.deleteCardConfirmation.modal('hide');
					},
					createCard : function(event) {
						
						var vm = this;

						if(this.isFormInEdit()) {
							this.editCard();
							return;
						}

						vm.loadings.cardSubmit = true;

						var newCardFormData = new CreateCardForm();
						var pageX = event.pageX;
						var pageY = event.pageY;

						newCardFormData
							.setTitle(this.forms.createCard.title)
							.setContent(this.getCardContent())
							.setType(vm.tobe.sendCardType)
							.setPageX(pageX)
							.setPageY(pageY);

							
						if(vm.formStatus != 'create-contention') {
							newCardFormData
								.setRelatedTo(vm.tobe.relatedId)
								.setRelationType(vm.tobe.sendCardType);
						}

						var request = $.post({
							url: '/api/board/'+ vm.board.getId() +'/card',
							data : JSON.stringify(newCardFormData.toPlainObject()),
							contentType : 'application/json; charset=UTF-8',
						});

						request.then(function(message) {
							vm.loadings.cardSubmit = false;
							
							vm.notifyThatSomethingSuccess('Card Telah Tersimpan');
							vm.closeCreateCardModal();
						})
						.catch(function(error) {
							vm.loadings.cardSubmit = false;

							vm.handleError(error, function(error) {
								if(error.status == 400) {
									var error = JSON.parse(error.responseText);
									vm.handleValidationErrors(error.errors);
								}
							});
						})
					},
					getCardContent : function() {
						return this.editor.summernote('code');
					},
					scaleChange : function(event) {
						var leftSubtractValueMap = {
							'0.2' 	: 10,
							'0.3' 	: 10,
							'0.4' 	: 10,
							'0.5' 	: 10,
							'0.6' 	: 10,
							'0.7' 	: 10,
							'0.8' 	: 10,
							'0.9' 	: 10,
							'1' 	: 10
						};

						var topSubtractValueMap = {
							'0.2'	: 500,
							'0.3'	: 320,
							'0.4' 	: 250,
							'0.5'	: 190,
							'0.6'	: 170,
							'0.7'	: 150,
							'0.8'	: 130,
							'0.9' 	: 100,
							'1' 	: 90
						};

						this.scale = parseFloat(event.target.value);;

						var scaleValue = parseFloat(event.target.value);
						var scaleCssValue = 'scale(' + scaleValue.toString() + ')';

						$("#argumen-container").css({
							"-webkit-transform"	: scaleCssValue,
							"-moz-transform"	: scaleCssValue,
							"-ms-transform"		: scaleCssValue,
							"-o-transform"		: scaleCssValue,
							"transform"			: scaleCssValue,
							"-webkit-transform-origin": 'left 0.1%'
						});

						jsPlumb.setZoom(scaleValue);

						this.leftSubtractValue = leftSubtractValueMap[scaleValue.toString()];
						this.topSubtractValue = topSubtractValueMap[scaleValue.toString()];
						
					},
					saveCardPositionChange : function(args) {
						
						var cardIdToBeUpdated = this.cards[args.index].getId();
						var url = '/api/card/'+ cardIdToBeUpdated +'/updatePosition'
						var boardId = this.board.getId();

						var data = {
							top : args.pageX, 
							left : args.pageY,
							boardId : boardId
						}

						var request = $.post({
							url: url,
							data : JSON.stringify(data),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.catch(function(error) {
								toastr.error('Perpindahan posisi card tidak tersimpan, mungkin koneksi anda bermasalah')
							})
					},
					openModalAndSetCardToBeDeleted : function(args) {
						this.tobe.deletedCardIndex = args.index;
						this.openDeleteCardConfimationModal();
					},
					deleteCardByIndex : function() {

						var vm = this;

						var cardIdToBeDeleted = this.cards[this.tobe.deletedCardIndex].getId();
						var url = '/api/card/'+ cardIdToBeDeleted +'/delete'
						var boardId = this.board.getId();

						//check if any card related to this cardData
						var relatedCards = vm.cards.filter(function(card) {
						 	return card.getRelatedTo() == cardIdToBeDeleted;
						});

						if(relatedCards.length) {
						 	toastr.warning('Anda tidak bisa menghapus card yang berelasi dengan card lain, hapus card yang berelasi dengan card ini dulu.');
						 	vm.closeDeleteCardConfirmationModal();
						 	return;
						}

						vm.loadings.cardDelete = true;

						var data = {
							boardId : boardId
						}

						var request = $.post({
							url: url,
							data : JSON.stringify(data),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.then(function(data) {
								
								setTimeout(function() {
									vm.loadings.cardDelete = false;

									vm.closeDeleteCardConfirmationModal();
									toastr.success('Card telah terhapus');
								}, 3000);

								
								
							})
							.catch(function(error) {
								vm.loadings.cardDelete = false;
								
								vm.handleError(error);

								vm.closeDeleteCardConfirmationModal();
							})	
					},
					createRelatedCard : function(args) {
						var vm = this;

						vm.tobe.relatedId = vm.cards[args.index].getId();  
						vm.formStatus = 'create-' + args.type;
						vm.tobe.sendCardType = args.type
						
						vm.openCreateCardModal();
					},
					isCurrentUserTheBoardCreator : function() {
						if(this.board.getUser() == null) {
							return false;
						}

						return this.board.getUser().getId() == this.user.getId();
					},
					addCardConnection : function(connection) {
						this.connections.push(connection)
					},
					removeConnectionByCardId : function(args) {
						
						var vm = this;

						var deletedCardId = args.cardId;
						
						var toBeDeletedConnections = this.connections.filter(function(connection) {
							return connection.target == deletedCardId || connection.source == deletedCardId;
						});
						
						toBeDeletedConnections.forEach(function(connection) {
							
							var connectionIndexToBeDeleted = R.findIndex(R.propEq('source', connection.source) && R.propEq('target', connection.target), vm.connections);
							
							jsPlumb.detach(vm.connections[connectionIndexToBeDeleted].connection);
							vm.connections.splice(connectionIndexToBeDeleted, 1);
						})
					},
					openModalToChangeCard : function(args) {
						var vm = this;

						this.tobe.changedCardIndex = args.index;
						
						var cardIdToBeEdited = this.cards[args.index].getId();
						var cardTypeToBeEdited = this.cards[args.index].getType();
						var cardTitleToBeEdited = this.cards[args.index].getTitle();

						var url = '/api/card/' + cardIdToBeEdited + '/catatan';

						var request = $.get({
							url : url
						});

						request
							.then(function(data) {
								vm.formStatus = 'edit-' + cardTypeToBeEdited;
								vm.editor.summernote("code", data.catatan);
								vm.forms.createCard.title = cardTitleToBeEdited;
								vm.openCreateCardModal();
							})
							.catch(function(error) {
								alert('You cannot open this')
							})
					},
					editCard : function() {
						
						var vm = this;

						vm.loadings.cardSubmit = true;

						var cardIdToBeEdited = this.cards[this.tobe.changedCardIndex].getId();
						var url = '/api/card/'+ cardIdToBeEdited +'/update';
						
						var data = {
							title : this.forms.createCard.title,
							content : this.getCardContent(),
							boardId : vm.board.getId()
						}

						var request = $.post({
							url: url,
							data : JSON.stringify(data),
							contentType : 'application/json; charset=UTF-8',
						});

						request.then(function(message) {
							vm.loadings.cardSubmit = false;

							vm.closeCreateCardModal();
						})
						.catch(function(error) {
							
							vm.loadings.cardSubmit = false;

							vm.handleError(error, function(error) {
								if(error.status == 400) {
									var error = JSON.parse(error.responseText);
									vm.handleValidationErrors(error.errors);
								}
							});
						})
					},
					isFormInEdit : function() {
						
						var vm = this;

						var editStatuses = [
							'edit-contention',
							'edit-objection',
							'edit-reason',
							'edit-co-reason',
							'edit-rebuttal'
						];

						var formStatusInEditStatuses = editStatuses.find(function(status) {
							return vm.formStatus == status;
						});

						return formStatusInEditStatuses != undefined;
					},
					decideIfCurrentUserBoardCollaborator : function() {
						return this.board.isUserCollaborator(this.user) || this.isCurrentUserTheBoardCreator();
					},
					requestToJoinBoard : function() {
						var vm = this;

						vm.loadings.requestToBeCollaborator = true;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/join';

						var request = $.post({
							url : url
						})

						request
							.then(function(collaboratorsRequest) {
								setTimeout(function() {
									vm.isUserInRequestingToBeCollaborator = true;
									vm.loadings.requestToBeCollaborator = false;
								}, 9000)
							})
							.catch(function(error) {
								vm.loadings.requestToBeCollaborator = false;
								vm.handleError(error)
							})
					},
					openCollaboratorsModal : function() {
						this.modals.collaborators.modal({
							backdrop : 'static',
							keyboard : false
						})
					},
					hideCollaboratorsModal : function() {
						this.modals.collaborators.modal('hide');
					},
					acceptCollaboratorRequest : function(userId, index) {
						var vm = this;

						vm.loadings.acceptJoin = true;
						vm.tobe.acceptedCollaboratorRequestIndex = index;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/accept-join';

						var request = $.post({
							url : url,
							data : JSON.stringify({ userId : userId }),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.then(function(collaborator) {

								setTimeout(function() {
									vm.loadings.acceptJoin = false;
									vm.boardCollaborators.push(collaborator);
									vm.collaboratorsRequest.splice(index, 1);
									vm.tobe.acceptedCollaboratorRequestIndex = null;
								}, 9000)
								
							})
							.catch(function(error) {
								vm.tobe.acceptedCollaboratorRequestIndex = null;
								vm.loadings.acceptJoin = false;
								vm.handleError(error);
							})
					},
					uploadImage : function(image) {
						
						var formData = new FormData();
						formData.append('image', image);

						var uploadUrl = '/api/upload-image';

						var request = $.post({
							url : uploadUrl,
							data : formData,
							contentType : false,
							processData : false
						});

						return request;
					},
					rejectCollaboratorRequest : function(userId, index) {
						var vm = this;

						vm.loadings.rejectJoin = true;
						vm.tobe.rejectedCollaboratorRequestIndex = index;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/reject-join';

						var request = $.post({
							url : url,
							data : JSON.stringify({ userId : userId }),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.then(function(collaborator) {
								setTimeout(function() {
									vm.collaboratorsRequest.splice(index, 1);
									vm.loadings.rejectJoin = false;
									vm.tobe.rejectedCollaboratorRequestIndex = null;
								}, 9000)
								
							})
							.catch(function(error) {

								vm.tobe.rejectedCollaboratorRequestIndex = null;
								vm.loadings.rejectJoin = false;
								vm.handleError(error);
							})
					},
					bookmarkThisBoard : function() {
						var vm = this;

						vm.loadings.bookmarkRequest = true;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/bookmark';

						var request = $.post({
							url : url,
						});

						request
							.then(function() {
								setTimeout(function() {
									vm.isUserBookmarkedThisBoard = true;
									vm.loadings.bookmarkRequest = false;
								}, 9000)
								
							})
							.catch(function(error) {
								
								vm.loadings.bookmarkRequest = false;
								vm.handleError(error);
							})
					},
					removeBookmarkThisBoard : function(){
						var vm = this;

						vm.loadings.bookmarkRequest = true;

						var boardId = $('meta[name=boardId]').attr("content");
						var url = '/api/board/' + boardId + '/remove-bookmark';

						var request = $.post({
							url : url,
						});

						request
							.then(function() {
								setTimeout(function() {
									vm.isUserBookmarkedThisBoard = false;
									vm.loadings.bookmarkRequest = false;
								}, 9000)
								
							})
							.catch(function(error) {
								vm.loadings.bookmarkRequest = false;
								vm.handleError(error);
							})
					},
					notifyThatSomethingError : function(message) {
						toastr.error(message);
					},
					notifyThatSomethingSuccess : function(message) {
						toastr.success(message);
					},
					handleError : function(error, callback) {
						var vm = this;
						if(error.status == 0) {
							vm.notifyThatSomethingError('Kelihataanya koneksi internet anda bermasalah');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 401) {
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 400) {
							vm.notifyThatSomethingError('Mohon perbaiki isian form sesuai dengan pesan yang ada');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 500) {
							vm.notifyThatSomethingError('Mohon maaf, terjadi error pada server.');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}
					},
					handleValidationErrors : function(errors) {
						
						var vm = this;

						var params = ['title'];

						params.forEach(function(param) {
							var paramError = errors.find(function(error) {
								return error.param == param
							})

							if(paramError != undefined) {

								vm.formsError.createCard[param].error = true;
								vm.formsError.createCard[param].message  = paramError.msg
							}
						})
					},
					resetFormErrorState : function(param) {
						this.formsError.createCard[param].error = false;
					},
					resetAllFormErrorState : function() {
						var vm = this;

						var params = ['title'];

						params.forEach(function(param) {
							vm.resetFormErrorState(param);
						})
					}
				},
				computed : {
					createFormTitle : function() {
						var formTitleMappingFormStatus = {
							'create-contention' : 'Buat Kesimpulan',
							'create-objection' : 'Buat Keberatan',
							'create-reason' : 'Buat Alasan',
							'create-co-reason' : 'Buat Sub Alasan',
							'create-rebuttal' : 'Buat Bantahan',
							'edit-contention' : 'Ubah Kesimpulan',
							'edit-objection' : 'Ubah Keberatan',
							'edit-reason' : 'Ubah Alasan',
							'edit-co-reason' : 'Ubah Sub Alasan',
							'edit-rebuttal' : 'Ubah Bantahan'
						};

						return formTitleMappingFormStatus[this.formStatus];
					},
					numberOfCollaboratorsRequest : function() {
						return this.collaboratorsRequest.length;
					}
				},
				mounted :function() {
					
					var vm = this;

					jsPlumb.setContainer("argumen-container");

					toastr.options = {
					  "closeButton": false,
					  "debug": false,
					  "newestOnTop": false,
					  "progressBar": true,
					  "positionClass": "toast-bottom-right",
					  "preventDuplicates": true,
					  "onclick": null,
					  "showDuration": "300",
					  "hideDuration": "1000",
					  "timeOut": "5000",
					  "extendedTimeOut": "1000",
					  "showEasing": "swing",
					  "hideEasing": "linear",
					  "showMethod": "fadeIn",
					  "hideMethod": "fadeOut"
					}

					this.getViewBoardPageData()
						.then(function() {

							$('[data-toggle="popover"]').popover({
								container: 'body'
							}); 
						
							vm.sockets.card = io('/card');

							if(vm.isUserOwnerOfBoard) {

								var collaboratorsRequestAddedEventName = vm.board.getId() + ':collaborator-request-added';
								
								vm.sockets.card.on(collaboratorsRequestAddedEventName, function(userData) {
									vm.collaboratorsRequest.push(userData)
								})
							}

							var cardCreatedEventName = vm.board.getId() + ':card-created';
							
							vm.sockets.card.on(cardCreatedEventName, function(newCard) {
								
								var cardInstance = new Card();
								
								var creatorOfCard = new User();
								creatorOfCard
									.setId(newCard.creator.id)
									.setName(newCard.creator.name);

								var cardRelation = new Relation();
									cardRelation
										.setTo(newCard.related.to)
										.setType(newCard.related.type);

								cardInstance
									.setId(newCard._id)
									.setTitle(newCard.title)
									.setType(newCard.type)
									.setCreator(creatorOfCard)
									.setLeft(newCard.left)
									.setTop(newCard.top)
									.setRelation(cardRelation);

								vm.cards.push(cardInstance);
							})

							var cardPositionChangedEventName = vm.board.getId() + ':card-position-changed';
							
							vm.sockets.card.on(cardPositionChangedEventName, function(cardData) {
								var indexOfCardToBeChangedPosition = R.findIndex(R.propEq('id', cardData.cardId), vm.cards);
								vm.cards[indexOfCardToBeChangedPosition].setTop(cardData.top);
								vm.cards[indexOfCardToBeChangedPosition].setLeft(cardData.left);

								setTimeout(function() {
									jsPlumb.repaintEverything();
								}, 500)
							})

							var cardDeletedEventName = vm.board.getId() + ':card-deleted';
							
							vm.sockets.card.on(cardDeletedEventName, function(cardData) {
								
								vm.removeConnectionByCardId(cardData);

								var indexOfCardToBeDeleted = R.findIndex(R.propEq('id', cardData.cardId), vm.cards);
								vm.cards.splice(indexOfCardToBeDeleted, 1)
							})

							var cardUpdatedEventName = vm.board.getId() + ':card-updated';
							
							vm.sockets.card.on(cardUpdatedEventName, function(cardData) {
								
								var indexOfCardToBeUpdated = R.findIndex(R.propEq('id', cardData.cardId), vm.cards);
								vm.cards[indexOfCardToBeUpdated].setTitle(cardData.title);
							})

							var collaboratorAddedEventName = vm.board.getId() + ':collaborator-added';
							
							vm.sockets.card.on(collaboratorAddedEventName, function(userData) {
								vm.board.collaboratorIds.push(userData.userId);
							})

							var currentUserChangeCollaboratorState = vm.board.getId() + ':' + vm.user.getId() + ':collaboratoration-state-change';
							
							vm.sockets.card.on(currentUserChangeCollaboratorState, function(userCollaborationState) {
								if(userCollaborationState.value) {
									vm.isUserCollaborator = true;
									vm.isUserInRequestingToBeCollaborator = false;
								} else {
									vm.isUserCollaboratorRequestRejected = true;
									vm.isUserInRequestingToBeCollaborator = false;
								}
							})

						});
					
					this.editor = $('#content-editor');

					this.editor.summernote({
						toolbar: [
						    ['style', ['bold', 'italic', 'underline', 'clear']],
						    ['font', ['strikethrough']],
						    ['fontsize', ['fontsize']],
						    ['color', ['color']],
						    ['para', ['ul', 'ol', 'paragraph']],
						    ['height', ['height']],
						    ['insert', ['picture', 'link', 'video']]
						],
						height: 200,
					  	minHeight: null,
						maxHeight: null,
						focus: true,
						dialogsInBody: true,
						lang: 'id-ID',
						callbacks : {
							onImageUpload: function(images) {
								
								vm.uploadImage(images[0])
								.then(function(data) {
									vm.editor.summernote('editor.insertImage', data.imageUrl);
								})
								.catch(function(error) {

								})
							}
						}
					});

					this.modals.createCard = $('#create-card-modal');
					this.modals.deleteCardConfirmation = $('#delete-card-confirmation-modal');

					this.modals.createCard.on('hide.bs.modal', function() {
						vm.forms.createCard.title = '';
						vm.editor.summernote('reset');
						vm.resetAllFormErrorState(); 
					})

					if($('#collaborator-modal').length) {
						vm.modals.collaborators = $('#collaborator-modal');
					}
				}
			})

		})();

		