extends layouts/main.pug

block stylehead
	link(rel='stylesheet' href='/bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.css')
	link(rel='stylesheet' href='/styles/smt-bootstrap.css')
	link(rel='stylesheet' href='/bower_components/toastr/toastr.css')

	style(type='text/css').
		
		div.bootstrap-tagsinput {
			float:right; 
			width: 100%;
		}

		.fa-spin-custom, .glyphicon-spin {
		    -webkit-animation: spin 1000ms infinite linear;
		    animation: spin 1000ms infinite linear;
		}
		@-webkit-keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}
		@keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}

		.has-error  .bootstrap-tagsinput {
			border-color: #d01919 !important; 
		}

		.navbar-lower {
			top: 50px;
		    z-index: 1029;
		    background-color : rgb(253,224,193);
		}

		.btn-in-table {
			margin-right: 1px;
			margin-left: 1px;
		}

		.pagination > li.active > a {
			background-color: #22be34 !important;
			border-color: #22be34 !important;
		}

		* {
			font-family: "Times New Roman", Georgia, Serif;
		}

		.help-inline {
			color: #d01919;
		}

		.submit-button {
			width: 10%;
			margin-right: 2px;
		}

		.button-tags {
			color : black !important;
		}

block content
	div(class='navbar navbar-fixed-top navbar-default navbar-lower' role='navigation')
		div(class='container')
			div(class='pull-right')
				button(class='btn btn-primary navbar-btn btn-sm' @click="openModalToCreateBoard()") Buat Board

	div(class='container')
		div(class='row')
			div(class='col-md-12' style="margin-top: 10%;")
				div(class='panel panel-default')
					div(class='panel-body')
						div(class='row')
							div(class='col-md-6')
								div(class='panel panel-default')
									div(class='panel-heading')
										p Saya
									div(class='panel-body')
										table(class='table table-default table-bordered table-striped')
											tbody()
												tr()
													th Nama
													td= user.name

							div(class='col-md-12')
								div(class='panel panel-default')
									div(class='panel-heading')
										p Board Saya
									div(class='panel-body' style="min-height:400px;")
										table(class='table table-default table-bordered table-striped')
											thead()
												tr()
													th(width="25%") Judul
													th(width="25%") Deskripsi
													th(width="25%") Tags
													th(width="10%" class='text-center') Aksi
											tbody()
												tr(v-for="(board, index) in boards")
													td() {{ board.getTitle() }}
													td() {{ board.getDescription() }}
													td()
														button(class='btn btn-default btn-xs btn-in-table' v-for="tag in board.getTags()" @click="viewBoardByTag(tag)") {{ tag }}
													td(class="text-center")
														button(class='btn btn-warning btn-xs' @click="viewBoard(board.getId())") Lihat
														button(@click="openModalToEditBoard(index)" class='btn btn-success btn-xs btn-in-table') Ubah
										div(class='row')
		
											div(class='col-md-6')
												ul(class='pagination')
													li(v-for='page in numberOfPages' v-if="!displayPaginationButton(currentPage, page)" v-bind:class="{ 'active' : currentPage == page }")
														a(@click="boardsGoToPage(page)") {{ page }}

	div(class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="createBoardModal")
		div(class="modal-dialog modal-lg" role="document")
			div(class="modal-content")
				div(class="modal-header")
					div(class='row')
						div(class='col-md-12')
							h4(v-if="forms.createBoard.status == 'create-board'") Buat Board
							h4(v-if="forms.createBoard.status == 'edit-board'") Ubah Board
				div(class="modal-body")
					div(class="row")
						div(class="col-md-12")
							div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.title.error }")
								label(class="control-label") Judul
								input(@keyup="resetFormErrorState('title')" v-model="forms.createBoard.title" class="form-control" v-bind:disabled="loadings.submitBoards")
								p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.title.error") {{ formsError.createBoard.title.message }}

							div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.description.error }")
								label(class="control-label") Deskripsi
								textarea(@keyup="resetFormErrorState('description')" v-model="forms.createBoard.description" class="form-control" v-bind:disabled="loadings.submitBoards")
								p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.description.error") {{ formsError.createBoard.description.message }}

							div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.tags.error }")
								label(class="control-label") Tags
								br()
								p(style="font-size:13px;") Untuk menambah tags, isikan kata lalu tekan 
									strong() Enter
								input(@keyup="resetFormErrorState('tags')" type="text" id="tagsinput" class="form-control" v-bind:disabled="loadings.submitBoards")
								p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.tags.error") {{ formsError.createBoard.tags.message }}
								
							div(class="form-group" style="padding-top:5%;")
								button(v-if="forms.createBoard.status == 'create-board' && !loadings.submitBoards" class='btn btn-success btn-sm submit-button' @click='createBoard()') Buat
								button(v-if="forms.createBoard.status == 'create-board' && loadings.submitBoards" class='btn btn-success btn-sm submit-button' disabled)
									span(class="glyphicon glyphicon-refresh glyphicon-spin")

								button(v-if="forms.createBoard.status == 'edit-board' && !loadings.submitBoards" class='btn btn-success btn-sm submit-button' @click='editBoard()') Ubah
								button(v-if="forms.createBoard.status == 'edit-board' && loadings.submitBoards" class='btn btn-success btn-sm submit-button' disabled)
									span(class="glyphicon glyphicon-refresh glyphicon-spin")

								button(class='btn btn-warning btn-sm' @click='hideCreateBoardModal()' v-if="!loadings.submitBoards") Tutup
								button(class='btn btn-warning btn-sm' disabled v-if="loadings.submitBoards") Tutup


block script
	script(type='text/javascript' src='bower_components/jquery/dist/jquery.js')
	script(type='text/javascript' src='bower_components/bootstrap/dist/js/bootstrap.js')
	script(type='text/javascript' src='/bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.js')
	script(type='text/javascript' src='bower_components/vue/dist/vue.js')
	script(type='text/javascript' src='/bower_components/toastr/toastr.js')
	script(type='text/javascript' src='models/board.js')

	script(type='text/javascript').
		(function() {
			var app = new Vue({
				el : '#app',
				data : {
					forms : {
						createBoard : {
							title : '',
							description : '',
							tags : '',
							status : 'create-board'
						}
					},
					loadings : {
						submitBoards : false
					},
					toBe : {
						indexBoardEdited : null
					},
					inputs : {
						tags : null
					},
					numberOfPages : 0,
					currentPage : 1,
					modals : {
						createBoardModal : null
					},
					boards : [],
					formsError : {
						createBoard : {
							title : {
								error : false,
								message : ''
							},
							description : {
								error : false,
								message : ''
							},
							tags : {
								error : false,
								message : ''
							}
						}
					}
				},
				methods : {
					openCreateBoardModal : function() {
						this.modals.createBoardModal.modal({
							backdrop: 'static',
							keyboard: false
						})
					},
					hideCreateBoardModal : function() {
						this.modals.createBoardModal.modal('hide')
					},
					createBoard : function() {
						
						var vm = this;

						vm.forms.createBoard.tags = vm.inputs.tags.val();

						var request = $.post({
							url : '/api/board',
							data : JSON.stringify(vm.forms.createBoard),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.then(function(newBoard) {
								vm.getBoards(vm.currentPage).then(function() {
									vm.loadings.submitBoards = false;
									vm.hideCreateBoardModal();
									vm.notifyThatSomethingSuccess('Board Berhasil Tersimpan');
								});
							})
							.catch(function(error) {
								vm.loadings.submitBoards = false;

								vm.handleError(error, function(error) {
									if(error.status == 400) {
										var error = JSON.parse(error.responseText);
										vm.handleValidationErrors(error.errors);
									}
								})
							})
					},
					editBoard : function() {

						var vm = this;

						vm.loadings.submitBoards = true;
						
						var boardIdToBeEdited = this.boards[this.toBe.indexBoardEdited].getId();
						var url = '/api/board/' + boardIdToBeEdited + '/update';

						vm.forms.createBoard.tags = vm.inputs.tags.val();

						var request = $.post({
							url : url,
							data : JSON.stringify(vm.forms.createBoard),
							contentType : 'application/json; charset=UTF-8',
						});

						return request
							.then(function() {
								vm.getBoards(vm.currentPage).then(function() {
									vm.loadings.submitBoards = false;
									vm.hideCreateBoardModal();
									vm.notifyThatSomethingSuccess('Board berhasil diubah');
								});
							})
							.catch(function(error) {
								
								vm.loadings.submitBoards = false;

								vm.handleError(error, function(error) {
									if(error.status == 400) {
										var error = JSON.parse(error.responseText);
										vm.handleValidationErrors(error.errors);
									}
								})
							})

					},
					getBoards : function(page) {
						var vm = this;

						var request = $.get({
							url : '/api/my-boards',
							data: { 
							   page: page == null ? 1 : page, 
							},
						});

						return request
							.then(function(boards) {

								vm.boards.splice(0, vm.boards.length)
								vm.numberOfPages = boards.pages;

								boards.docs.forEach(function(board) {
									
									var toBePushedboard  = new Board();
									
									toBePushedboard
										.setId(board._id)
										.setTitle(board.title)
										.setDescription(board.description)
										.setTags(board.tags);

									vm.boards.push(toBePushedboard);
								})
							})
							.catch(function(error) {
								console.log(error)
							})
					},
					viewBoard : function(boardId) {
						var url = '/board/' + boardId;
						window.open(url);
					},
					boardsGoToPage : function(page) {
						this.currentPage = page;
						this.getBoards(page);
					},
					displayPaginationButton : function(currentPage, page) {
						return (currentPage - 2) > page || (currentPage + 2) < page  
					},
					openModalToCreateBoard :function() {
						this.forms.createBoard.status = 'create-board';
						this.openCreateBoardModal();
					},
					openModalToEditBoard : function(index) {
						
						var vm = this;

						this.forms.createBoard.status = 'edit-board';
						this.toBe.indexBoardEdited = index;

						this.boards[index].getTags().forEach(function(tag) {
							vm.inputs.tags.tagsinput('add', tag);
						});

						vm.forms.createBoard.title = vm.boards[index].getTitle();
						vm.forms.createBoard.description = vm.boards[index].getDescription();

						vm.openCreateBoardModal();
					},
					viewBoardByTag : function(tag) {
						var url = '/tag/board?tag=' + tag;
						window.open(url);
					},
					handleValidationErrors : function(errors) {
						
						var vm = this;

						var params = ['title', 'description', 'tags'];

						params.forEach(function(param) {
							var paramError = errors.find(function(error) {
								return error.param == param
							})

							if(paramError != undefined) {

								vm.formsError.createBoard[param].error = true;
								vm.formsError.createBoard[param].message  = paramError.msg
							}
						})
					},
					resetFormErrorState : function(param) {
						this.formsError.createBoard[param].error = false;
					},
					resetAllFormErrorState : function() {
						var vm = this;

						var params = ['title', 'description', 'tags'];

						params.forEach(function(param) {
							vm.resetFormErrorState(param);
						})
					},
					notifyThatSomethingError : function(message) {
						toastr.error(message);
					},
					notifyThatSomethingSuccess : function(message) {
						toastr.success(message);
					},
					handleError : function(error, callback) {
						var vm = this;
						if(error.status == 0) {
							vm.notifyThatSomethingError('Kelihataanya koneksi internet anda bermasalah');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 401) {
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 400) {
							vm.notifyThatSomethingError('Mohon perbaiki isian form sesuai dengan pesan yang ada');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}
					},
				},
				mounted : function() {
					
					var vm = this;

					toastr.options = {
					  "closeButton": false,
					  "debug": false,
					  "newestOnTop": false,
					  "progressBar": true,
					  "positionClass": "toast-top-right",
					  "preventDuplicates": true,
					  "onclick": null,
					  "showDuration": "300",
					  "hideDuration": "1000",
					  "timeOut": "5000",
					  "extendedTimeOut": "1000",
					  "showEasing": "swing",
					  "hideEasing": "linear",
					  "showMethod": "fadeIn",
					  "hideMethod": "fadeOut"
					}

					vm.inputs.tags =  $('#tagsinput');
					
					vm.inputs.tags.tagsinput({
						tagClass : 'btn btn-default btn-xs button-tags'
					});

					vm.inputs.tags.on('beforeItemAdd', function(event) {
						vm.resetFormErrorState('tags')
					});

					vm.modals.createBoardModal = $('#createBoardModal');
					
					vm.modals.createBoardModal.on('hidden.bs.modal', function() {
						vm.forms.createBoard.title = '';
						vm.forms.createBoard.description = '';
						vm.inputs.tags.tagsinput('removeAll');

						vm.resetAllFormErrorState();
					})

					vm.getBoards();
				}
			})
		})();