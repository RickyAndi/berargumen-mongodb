extends layouts/main.pug

block stylehead
	link(rel='stylesheet' href='/bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.css')
	link(rel='stylesheet' href='/styles/smt-bootstrap.css')
	link(rel='stylesheet' href='/bower_components/toastr/toastr.css')

	style().

		.jancok {
			background-color: #d01919;
		}

		.fa-spin-custom, .glyphicon-spin {
		    -webkit-animation: spin 1000ms infinite linear;
		    animation: spin 1000ms infinite linear;
		}
		@-webkit-keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}
		@keyframes spin {
		    0% {
		        -webkit-transform: rotate(0deg);
		        transform: rotate(0deg);
		    }
		    100% {
		        -webkit-transform: rotate(359deg);
		        transform: rotate(359deg);
		    }
		}

		.panel > .panel-heading {
			background-color: rgb(23,30,38);
			color : white;
		}

		.pagination > li.active > a {
			background-color: #22be34 !important;
			border-color: #22be34 !important;
		}

		div.bootstrap-tagsinput {
			float:right; 
			width: 100%;
		}

		.pagination > li > a:hover {
			cursor: pointer; 
			cursor: hand;
		}

		.not-displayed {
			display : none;
		}

		.btn-in-table {
			margin-right: 1px;
			margin-left: 1px;
		}

		* {
			font-family: "Times New Roman", Georgia, Serif;
		}

		footer{
			background: rgb(23,30,38);
			padding: 60px 20px;
		}
		
		footer ul, footer p{
			margin-bottom: 0;
		}
		
		footer .footer-block{
			margin-bottom: 30px;
		}
		
		footer a{
			color: #188b87;
		}
		
		footer .footer-menu a{
			text-transform: uppercase;
		}
		
		footer .social-icon a{
			display: block;
			width: 40px;
			height: 40px;
			line-height: 40px;
			text-align: center;
			border:1px solid #ddd;
		}
		
		@media (max-width: 767px){
			footer .footer-menu{
				text-align: center;
			}
			footer .social-icon{
				float: none !important;
				text-align: center;
			}
		}

		.loadinggif {
		    background:url('/images/ajax-loader.gif') no-repeat right;
		}

		p.copyright {
			color: white;
		}

		.panel {
			border-color: black;
		}

		.nav-tabs {
			border-color: black;
		}

		.penjelasan {
			font-size: 16px;
		}

		.button-tags {
			color : black !important;
		}

		.submit-button {
			width: 10%;
			margin-right: 2px;
		}

		.help-inline {
			color: #d01919;
		}

		.has-error  .bootstrap-tagsinput {
			border-color: #d01919 !important; 
		}

block content
	div(class='jumbotron' style="background-color:rgb(23,30,38);")
		div(class='container' style='padding-top:50px;')
			div(class='row')
				div(class='col-md-12 text-center')
					h1(style="color: white; font-size: 120px;") Berargumen
					br()
					p(style="color: white; font-size: 25px;") &nbsp;Visualisasi argumen dengan diagram argumen
	
	div(class='container' style='min-height: 1000px;')
		div(class='row')
			div(class='col-md-12')
				div(class='row')
					div(class='col-md-12 text-center')
						h2 Kenapa Memakai <strong>Berargumen</strong> ?
					
					div(class='col-md-12')
						div(class='row')
							div(class='col-md-6' style='margin-top: 5%;')
								p(class='penjelasan') Dengan <strong>Berargumen</strong>, anda bisa mengundang teman anda untuk berkolaborasi secara real-time, membuat suatu argumen yang baik, dan anda bisa mengundang lawan anda untuk memberikan argumen argumen yang berlawanan dengan anda, sehingga kita bisa melihat suatu topik dari kedua sisi.
							div(class='col-md-6 text-center' style='margin-top: 5%;')
								<span style="font-size:10em;" class="glyphicon glyphicon-user"></span>
								<span style="font-size:10em;" class="glyphicon glyphicon-comment"></span>
					
					div(class='col-md-12')
						div(class='row')
							div(class='col-md-6' style='margin-top: 5%;')
								p(class='penjelasan') Sebuah argumen terdiri dari beberapa bagian, seperti kesimpulan (Contention), alasan (Reason), dan lain sebagainya, dengan <strong>Berargumen</strong>, maka seseorang akan bisa mengerti bagian bagian tersebut dengan lebih mudah, sehingga alur argumen anda juga lebih mudah dimengerti, lain halnya jika anda menyampaikan sebuah argumen hanya dengan tulisan, dimana seseorang perlu menganalisa tulisan anda tersebut untuk mengetahui bagian bagian argumen dan alur dari argumen anda, dan tidak semua orang dengan mudah bisa melakukan hal ini, sehingga dengan <strong>Berargumen</strong> pembaca juga semakin banyak karena semua orang bisa mengerti sebuah argumen dengan mudah.
							div(class='col-md-6 text-center' style='margin-top: 5%;')
								<span style="font-size:10em;" class="glyphicon glyphicon-eye-open"></span>
								<span style="font-size:10em;" class="glyphicon glyphicon-ok-circle"></span>

					div(class='col-md-12')
						div(class='row')
							div(class='col-md-6' style='margin-top: 5%;')
								p(class='penjelasan') Dalam forum forum internet sering dijumpai suatu perdebatan dengan topik yang terus diulang-ulang, sering juga ditemui suatu perdebatan tiada henti (debat kusir) yang tiada titik temu, hal ini karena pada forum forum tersebut, argumennya disajikan secara tidak teratur, tidak jelas seseorang mendukung bagian argumen mana ?, atau membantah yang bagian mana ?, hal ini menimbulkan kesalahfahaman. Dengan <strong>Berargumen</strong>, sesorang bisa dengan jelas memberikan argumennya untuk mendukung bagian mana atau membantah suatu bagian argumen mana, sehingga tidak perlu ada yang diulang-ulang.
							div(class='col-md-6 text-center' style='margin-top: 5%;')
								<span style="font-size:10em;" class="glyphicon glyphicon-fire"></span>
								<span style="font-size:10em;" class="glyphicon glyphicon-ban-circle"></span>

			div(class='col-md-12' style="margin-top: 10%;")
				div(class='panel panel-default')
					div(class='panel-heading')
						p(style='font-size: 23px;') <strong>Board</strong>
					div(class='panel-body' style='min-height: 550px;')
						div(id="exTab2")
							ul(class="nav nav-tabs")
								li(class="active")
									a(href="#1" data-toggle="tab") Semua
								
								li()
									a(href="#2" data-toggle="tab") Board Saya
								
								li()
									a(href="#3" data-toggle="tab") Ditandai

								li()
									a(href="#4" data-toggle="tab") Board Kolaborasi
							
							div(class="tab-content")
								div(class="tab-pane active" id="1")
									div(class='row')
										div(class='col-md-12')
											div(class='row')
												div(class='col-md-6')
												div(class='col-md-6')
													br()
													input(class='form-control input-sm' v-bind:class="{ loadinggif : loadings.allBoardsSearch }" @keyup="searchAllBoards($event)" placeholder='Cari berdasar judul, deskripsi, tag')

										div(class='col-md-12')
											br()
											table(class='table table-default table-striped table-bordered')
												thead()
													tr()
														th(class='text-center' width='15%') Judul
														th(class='text-center' width='35%') Deskripsi
														th(class='text-center' width='10%') Pemilik
														th(class='text-center' width='20%') Tags
														th(class='text-center' width='10%') Diperbaharui
														th(class='text-center' width='10%') 
												tbody(v-if="boards.all.length")
													tr(v-for="board in boards.all")
														td() {{ board.getTitle() }}
														td() {{ board.getDescription() }}
														td()
															a(@click="viewUserProfile(board.getUser().getId())") {{ board.getUser().getName() }}
														td()
															button(class='btn btn-default btn-xs btn-in-table' v-for="tag in board.getTags()" @click="viewBoardByTag(tag)") {{ tag }}
														td(class='text-center') {{ board.getUpdatedDate() }}
														td(class='text-center')
															button(@click="viewBoard(board.getId())" class='btn btn-warning btn-xs btn-in-table') Lihat
												tbody(v-if="!boards.all.length")
													tr()
														td(class='text-center' colspan="6") Tidak Ada Board
														

											div(class='row')
												div(class='col-md-6')
													ul(class='pagination')
														li(v-for='page in numberOfPages.allBoards' v-if="!displayPaginationButton(currentPage.allBoards, page)" v-bind:class="{ 'active' : currentPage.allBoards == page }")
															a(@click="allBoardsGoToPage(page)") {{ page }}

								div(class="tab-pane" id="2")
									div(class='row')
										div(class='col-md-12')
											div(class='row')
												div(class='col-md-6')
													br()
													button(@click="openModalToCreateBoard()" class='btn btn-primary btn-sm' v-bind:disabled="currentUser == null") Buat Board
												div(class='col-md-6')
													br()
													input(class='form-control input-sm'  v-bind:class="{ loadinggif : loadings.currentUserBoardsSearch }" @keyup="searchCurrentUserBoards($event)" v-bind:disabled="currentUser == null" placeholder='Cari berdasar judul, deskripsi, tag')

										div(class='col-md-12' v-if="currentUser != null")
											br()
											table(class='table table-default table-striped table-bordered')
												thead()
													tr()
														th(class='text-center' width="20%") Judul
														th(class='text-center' width="45%") Deskripsi
														th(class='text-center' width="15%") Tags
														th(class='text-center' width="10%") Diperbaharui
														th(class='text-center' width="10%") 
												tbody(v-if="boards.currentUser.length")
													tr(v-for="(board, index) in boards.currentUser")
														td() {{ board.getTitle() }}
														td() {{ board.getDescription() }}
														td()
															button(class='btn btn-default btn-xs btn-in-table' v-for="tag in board.getTags()" @click="viewBoardByTag(tag)") {{ tag }}
														td(class='text-center') {{ board.getUpdatedDate() }}
														td(class='text-center')
															button(@click="viewBoard(board.getId())" class='btn btn-warning btn-xs btn-in-table') Lihat
															button(@click="openModalToEditBoard(index)" class='btn btn-success btn-xs btn-in-table') Ubah
												tbody(v-if="!boards.currentUser.length")
													tr()
														td(class='text-center' colspan="6") Tidak Ada Board Yang And Buat

											div(class='row')
												div(class='col-md-6')
													ul(class='pagination')
														li(v-for='page in numberOfPages.currentUserBoards' v-if="!displayPaginationButton(currentPage.currentUserBoards, page)" v-bind:class="{ 'active' : currentPage.currentUserBoards == page }")
															a(@click="currentUserBoardsGoToPage(page)") {{ page }}


										div(class='col-md-12 text-center' v-if="currentUser == null")
											br()
											h5() Anda harus login untuk melihat board anda
								
								div(class="tab-pane" id="3")
									div(class='row')
										div(class='col-md-12')
											div(class='row')
												div(class='col-md-6')
												div(class='col-md-6')
													br()
													input(class='form-control input-sm'  v-bind:class="{ loadinggif : loadings.bookmarkedBoardsSearch }" @keyup="searchBookmarkedBoards($event)" v-bind:disabled="currentUser == null" placeholder='Cari berdasar judul, deskripsi, tag')

										div(class='col-md-12' v-if="currentUser != null")
											br()
											table(class='table table-default table-striped table-bordered')
												thead()
													tr()
														th(class='text-center' width="15%") Judul
														th(class='text-center' width="35%") Deskripsi
														th(class='text-center' width="10%") Pemilik
														th(class='text-center' width="20%") Tags
														th(class='text-center' width="10%") Diperbaharui
														th(class='text-center' width="10%") 
												tbody(v-if="boards.bookmarked.length")
													tr(v-for="board in boards.bookmarked")
														td() {{ board.getTitle() }}
														td() {{ board.getDescription() }}
														td()
															a(@click="viewUserProfile(board.getUser().getId())") {{ board.getUser().getName() }}
														td() 
															button(class='btn btn-default btn-xs btn btn-in-table' v-for="tag in board.getTags()" @click="viewBoardByTag(tag)") {{ tag }}
														td(class='text-center') {{ board.getUpdatedDate() }}
														td(class='text-center')
															button(@click="viewBoard(board.getId())" class='btn btn-warning btn-xs') Lihat
												tbody(v-if="!boards.bookmarked.length")
													tr()
														td(class='text-center' colspan="6") Tidak Ada Board Yang Anda Tandai

											div(class='row')
												div(class='col-md-6')
													ul(class='pagination')
														li(v-for='page in numberOfPages.bookmarkedBoards' v-if="!displayPaginationButton(currentPage.bookmarkedBoards, page)" v-bind:class="{ 'active' : currentPage.bookmarkedBoards == page }")
															a(@click="currentUserBoardsGoToPage(page)") {{ page }}


										div(class='col-md-12 text-center' v-if="currentUser == null")
											br()
											h5() Anda harus login untuk melihat board yang anda tandai

								div(class="tab-pane" id="4")
									div(class='row')
										div(class='col-md-12')
											div(class='row')
												div(class='col-md-6')
												div(class='col-md-6')
													br()
													input(class='form-control input-sm'  v-bind:class="{ loadinggif : loadings.collaboratedBoardsSearch }" @keyup="searchCollaboratedBoards($event)" v-bind:disabled="currentUser == null" placeholder='Cari berdasar judul, deskripsi, tag')

										div(class='col-md-12' v-if="currentUser != null")
											br()
											table(class='table table-default table-striped table-bordered')
												thead()
													tr()
														th(class='text-center') Judul
														th(class='text-center') Deskripsi
														th(class='text-center') Pemilik
														th(class='text-center') Tags
														th(class='text-center') Diperbaharui
														th()
												tbody(v-if="boards.collaborated.length")
													tr(v-for="board in boards.collaborated")
														td() {{ board.getTitle() }}
														td() {{ board.getDescription() }}
														td()
															a(@click="viewUserProfile(board.getUser().getId())") {{ board.getUser().getName() }}
														td() 
															button(class='btn btn-default btn-xs btn btn-in-table' v-for="tag in board.getTags()" @click="viewBoardByTag(tag)") {{ tag }}
														td(class='text-center') {{ board.getUpdatedDate() }}
														td(class='text-center')
															button(@click="viewBoard(board.getId())" class='btn btn-warning btn-xs') Lihat
												tbody(v-if="!boards.collaborated.length")
													tr()
														td(class='text-center' colspan="6") Tidak Ada Board Yang Anda Berkolaborasi

											div(class='row')
												div(class='col-md-6')
													ul(class='pagination')
														li(v-for='page in numberOfPages.collaboratedBoards' v-if="!displayPaginationButton(currentPage.collaboratedBoards, page)" v-bind:class="{ 'active' : currentPage.collaboratedBoards == page }")
															a(@click="currentUserBoardsGoToPage(page)") {{ page }}


										div(class='col-md-12 text-center' v-if="currentUser == null")
											br()
											h5() Anda harus login untuk melihat board yang anda berkolaborasi
			
			div(class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="create-board-modal")
				div(class="modal-dialog modal-lg" role="document")
					div(class="modal-content")
						div(class="modal-header")
							div(class='row')
								div(class='col-md-12')
									h4(v-if="forms.createBoard.status == 'create-board'") Buat Board
									h4(v-if="forms.createBoard.status == 'edit-board'") Ubah Board
						div(class="modal-body")
							div(class="row")
								div(class="col-md-12")
									div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.title.error }")
										label(class="control-label") Judul
										input(@keyup="resetFormErrorState('title')" v-model="forms.createBoard.title" class="form-control" v-bind:disabled="loadings.submitBoards")
										p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.title.error") {{ formsError.createBoard.title.message }}

									div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.description.error }")
										label(class="control-label") Deskripsi
										textarea(@keyup="resetFormErrorState('description')" v-model="forms.createBoard.description" class="form-control" v-bind:disabled="loadings.submitBoards")
										p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.description.error") {{ formsError.createBoard.description.message }}

									div(class="form-group has-feedback" v-bind:class="{ 'has-error' : formsError.createBoard.tags.error }")
										label(class="control-label") Tags
										br()
										p(style="font-size:13px;") Untuk menambah tags, isikan kata lalu tekan 
											strong() Enter
										input(@keyup="resetFormErrorState('tags')" type="text" id="tagsinput" class="form-control" v-bind:disabled="loadings.submitBoards")
										p(class="help-inline" style="margin-top: 5px;" v-if="formsError.createBoard.tags.error") {{ formsError.createBoard.tags.message }}
										
									div(class="form-group" style="padding-top:5%;")
										button(v-if="forms.createBoard.status == 'create-board' && !loadings.submitBoards" class='btn btn-success btn-sm submit-button' @click='createBoard()') Buat
										button(v-if="forms.createBoard.status == 'create-board' && loadings.submitBoards" class='btn btn-success btn-sm submit-button' disabled)
											span(class="glyphicon glyphicon-refresh glyphicon-spin")

										button(v-if="forms.createBoard.status == 'edit-board' && !loadings.submitBoards" class='btn btn-success btn-sm submit-button' @click='editBoard()') Ubah
										button(v-if="forms.createBoard.status == 'edit-board' && loadings.submitBoards" class='btn btn-success btn-sm submit-button' disabled)
											span(class="glyphicon glyphicon-refresh glyphicon-spin")

										button(class='btn btn-warning btn-sm' @click='hideCreateBoardModal()' v-if="!loadings.submitBoards") Tutup
										button(class='btn btn-warning btn-sm' disabled v-if="loadings.submitBoards") Tutup
											
	footer(style="margin-top: 10%;")
		div(class="container")
			div(class="row")
				div(class="col-sm-4")
					div(class="footer-block")
						ul(class="list-inline footer-menu")
							
						
				div(class="col-sm-4")
					div(class="footer-block text-center")
						p(class="copyright") © 2017 Berargumen.
				div(class="col-sm-4")
					div(class="footer-block")
					
block script
	script(type='text/javascript' src='/bower_components/jquery/dist/jquery.js')
	script(type='text/javascript' src='/bower_components/bootstrap/dist/js/bootstrap.js')
	script(type='text/javascript' src='/bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.js')
	script(type='text/javascript' src='/bower_components/vue/dist/vue.js')
	script(type='text/javascript' src='/bower_components/moment/moment.js')
	script(type='text/javascript' src='/bower_components/rxjs/dist/rx.all.js')
	script(type='text/javascript' src='/bower_components/toastr/toastr.js')

	script(type='text/javascript' src='/models/user.js')
	script(type='text/javascript' src='/models/board.js')
	
	script(type='text/javascript').
		(function() {
			new Vue({
				el : '#app',
				data : {
					boards : {
						currentUser : [],
						all : [],
						bookmarked : [],
						collaborated : [],
					},
					loadings : {
						allBoardsSearch : false,
						currentUserBoardsSearch : false,
						bookmarkedBoardsSearch : false,
						collaboratedBoardsSearch : false,
						submitBoards : false
					},
					textQueries : {
						allBoards : '',
						currentUserBoards : '',
						bookmarkedBoards : '',
						collaboratedBoards : '',
					},
					toBe : {
						boardIndexEdited : null
					},
					boardSearchSubscribtions : {
						all : null,
						currentUser : null,
						bookmarked : null,
						collaborated : null
					},
					boardSearchSubjects : {
						all : new Rx.Subject(),
						currentUser : new Rx.Subject(),
						bookmarked : new Rx.Subject(),
						collaborated : new Rx.Subject()
					},
					currentUser : null,

					modals : {
						createBoardModal : null
					},
					forms : {
						createBoard : {
							title : null,
							description : null,
							tags : null,
							status : 'create-board'
						}
					},
					inputs : {
						tags : null
					},
					numberOfPages : {
						allBoards : 0,
						currentUserBoards : 0,
						bookmarkedBoards : 0,
						collaboratedBoards : 0
					},
					currentPage : {
						allBoards : 1,
						currentUserBoards : 1,
						bookmarkedBoards : 1,
						collaboratedBoards : 1
					},
					formsError : {
						createBoard : {
							title : {
								error : false,
								message : ''
							},
							description : {
								error : false,
								message : ''
							},
							tags : {
								error : false,
								message : ''
							}
						}
					}
				},
				methods : {
					getCurrentUser : function() {
						
						var vm = this;
						
						var request = $.get({
							url : '/api/me',
						});

						return request
							.then(function(user) {
								
								vm.currentUser = new User();
								vm.currentUser
									.setId(user._id)
									.setName(user.name)
									.setPhotoUrl(user.profilePicUrl)

								return user;	
							})
							.catch(function(error) {
								
							})
					},
					getCurrentUserBoards : function(page) {
						var vm = this;

						var request = $.get({
							url : '/api/my-boards',
							data: { 
							   page: page == null ? 1 : page,
							   q : vm.textQueries.currentUserBoards
							},
						});

						return request
							.then(function(currentUserBoards) {
								
								vm.boards.currentUser.splice(0, vm.boards.currentUser.length)

								vm.numberOfPages.currentUserBoards= currentUserBoards.pages;

								currentUserBoards.docs.forEach(function(board) {
									
									var updatedDate = moment(board.updated).format('D-MM-YYYY');
									
									var toBePushedboard  = new Board();
									
									toBePushedboard
										.setId(board._id)
										.setTitle(board.title)
										.setDescription(board.description)
										.setUpdatedDate(updatedDate)
										.setTags(board.tags);

									vm.boards.currentUser.push(toBePushedboard);
								})
							})
							.catch(function(error) {
								vm.handleError(error);
							})
					},
					getAllBoards : function(page) {
						var vm = this;

						var request = $.get({
							url : '/api/boards',
							data: { 
							   page: page == null ? 1 : page,
							   q : vm.textQueries.allBoards
							},
						});

						return request
							.then(function(allBoards) {
								
								vm.boards.all.splice(0, vm.boards.all.length)

								vm.numberOfPages.allBoards = allBoards.pages;

								allBoards.docs.forEach(function(board) {
									var user = new User();
									
									user
										.setId(board.user.id)
										.setName(board.user.name)
									
									var updatedDate = moment(board.updated).format('D-MM-YYYY');
									var toBePushedboard  = new Board();
									
									toBePushedboard
										.setId(board._id)
										.setTitle(board.title)
										.setDescription(board.description)
										.setUser(user)
										.setUpdatedDate(updatedDate)
										.setTags(board.tags);

									vm.boards.all.push(toBePushedboard);
								})
							})
							.catch(function(error) {
								vm.handleError(error);
							})
					},
					editBoard : function() {
						
						var vm = this;

						vm.loadings.submitBoards = true;

						var boardIdToBeEdited = this.boards.currentUser[this.toBe.boardIndexEdited].getId();
						var url = '/api/board/' + boardIdToBeEdited + '/update';

						vm.forms.createBoard.tags = vm.inputs.tags.val();

						var request = $.post({
							url : url,
							data : JSON.stringify(vm.forms.createBoard),
							contentType : 'application/json; charset=UTF-8',
						});

						return request
							.then(function() {
								vm.loadings.submitBoards = false;
								vm.getCurrentUserBoards(vm.currentPage.currentUserBoards);
								vm.hideCreateBoardModal();
								vm.notifyThatSomethingSuccess('Board berhasil diubah');
							})
							.catch(function(error) {
								
								vm.loadings.submitBoards = false;
								
								vm.handleError(error, function(error) {
									if(error.status == 400) {
										var error = JSON.parse(error.responseText);
										vm.handleValidationErrors(error.errors);
									}
								})
							})
					},
					getBookmarkedBoards : function(page) {
						var vm = this;

						var request = $.get({
							url : '/api/bookmarked-boards',
							data: { 
							   page: page == null ? 1 : page,
							   q : vm.textQueries.bookmarkedBoards 
							},
						});

						return request
							.then(function(bookmarkedBoards) {
								
								vm.boards.bookmarked.splice(0, vm.boards.bookmarked.length)

								vm.numberOfPages.bookmarkedBoards= bookmarkedBoards.pages;

								bookmarkedBoards.docs.forEach(function(board) {
									var user = new User();
									
									user
										.setId(board.user.id)
										.setName(board.user.name)
									
									var updatedDate = moment(board.updated).format('D-MM-YYYY');
									
									var toBePushedboard  = new Board();
									toBePushedboard
										.setId(board._id)
										.setTitle(board.title)
										.setDescription(board.description)
										.setUser(user)
										.setUpdatedDate(updatedDate)
										.setTags(board.tags);

									vm.boards.bookmarked.push(toBePushedboard);
								})
							})
							.catch(function(error) {
								vm.handleError(error);
							})
					},
					getCollaboratedBoards : function(page) {
						var vm = this;

						var request = $.get({
							url : '/api/collaborated-boards',
							data: { 
							   page: page == null ? 1 : page,
							   q : vm.textQueries.collaboratedBoards
							},
						});

						return request
							.then(function(collaboratedBoards) {
								
								vm.boards.collaborated.splice(0, vm.boards.collaborated.length)

								vm.numberOfPages.collaboratedBoards = collaboratedBoards.pages;

								collaboratedBoards.docs.forEach(function(board) {
									
									var user = new User();
									
									user
										.setId(board.user.id)
										.setName(board.user.name)
									
									var updatedDate = moment(board.updated).format('D-MM-YYYY');
									var toBePushedboard  = new Board();
									toBePushedboard
										.setId(board._id)
										.setTitle(board.title)
										.setDescription(board.description)
										.setUser(user)
										.setUpdatedDate(updatedDate)
										.setTags(board.tags);

									vm.boards.collaborated.push(toBePushedboard);
								})
							})
							.catch(function(error) {
								vm.handleError(error);
							})
					},
					openCreateBoardModal : function() {
						this.modals.createBoardModal.modal({
							backdrop: 'static',
							keyboard: false
						})
					},
					openModalToCreateBoard : function() {
						this.forms.createBoard.status = 'create-board';
						this.openCreateBoardModal();
					},
					hideCreateBoardModal : function() {
						this.modals.createBoardModal.modal('hide')
					},
					createBoard : function() {
					
						var vm = this;

						vm.loadings.submitBoards = true;

						vm.forms.createBoard.tags = vm.inputs.tags.val();

						var request = $.post({
							url : '/api/board',
							data : JSON.stringify(vm.forms.createBoard),
							contentType : 'application/json; charset=UTF-8',
						});

						request
							.then(function(newBoard) {
								vm.loadings.submitBoards = false;
								
								vm.getCurrentUserBoards(vm.currentPage.currentUserBoards);
								
								vm.hideCreateBoardModal();
								vm.notifyThatSomethingSuccess('Board Berhasil Tersimpan');
							})
							.catch(function(error) {
								vm.loadings.submitBoards = false;

								vm.handleError(error, function(error) {
									if(error.status == 400) {
										var error = JSON.parse(error.responseText);
										vm.handleValidationErrors(error.errors);
									}
								})
							})
					},
					viewBoard : function(boardId) {
						var url = '/board/' + boardId;
						window.open(url);
					},
					currentUserBoardsGoToPage : function(page) {
						this.currentPage.currentUserBoards = page;
						this.getCurrentUserBoards(page);
					},
					allBoardsGoToPage : function(page) {
						this.currentPage.allBoards = page;
						this.getAllBoards(page);
					},
					bookmarkedBoardsGoToPage : function(page) {
						this.currentPage.bookmarkedBoards = page;
						this.getBookmarkedBoards(page);
					},
					collaboratedBoardsGoToPage : function(page) {
						this.currentPage.collaboratedBoards = page;
						this.getCollaboratedBoards(page);
					},
					displayPaginationButton : function(currentPage, page) {
						return (currentPage - 2) > page || (currentPage + 2) < page  
					},
					viewUserProfile : function(userId) {
						window.open('/profile/' + userId);
					},
					openModalToEditBoard : function(index) {
						var vm = this;
						
						vm.forms.createBoard.status = 'edit-board';
						vm.toBe.boardIndexEdited = index;
						
						vm.boards.currentUser[index].getTags().forEach(function(tag) {
							vm.inputs.tags.tagsinput('add', tag);						
						})
						vm.forms.createBoard.title = vm.boards.currentUser[index].getTitle();
						vm.forms.createBoard.description = vm.boards.currentUser[index].getDescription();

						vm.openCreateBoardModal();
					},
					viewBoardByTag : function(tag) {
						var url = '/tag/board?tag=' + tag;
						window.open(url);
					},
					searchAllBoards : function(event) {
						this.currentPage.allBoards = 1;
						this.loadings.allBoardsSearch = true;
						this.textQueries.allBoards = event.target.value;
						this.boardSearchSubjects.all.onNext(event.target.value);
					},
					searchCurrentUserBoards : function(event) {
						if(this.currentUserv != null) {
							this.currentPage.currentUserBoards = 1;
							this.loadings.currentUserBoardsSearch = true;
							this.textQueries.currentUserBoards = event.target.value;
							this.boardSearchSubjects.currentUser.onNext(event.target.value);
						}
					},
					searchBookmarkedBoards : function(event) {
						if(this.currentUser != null) {
							this.currentPage.bookmarkedBoards = 1;
							this.loadings.bookmarkedBoardsSearch = true;
							this.textQueries.bookmarkedBoards = event.target.value;
							this.boardSearchSubjects.bookmarked.onNext(event.target.value);
						}
					},
					searchCollaboratedBoards : function(event) {
						if(this.currentUser != null) {
							this.currentPage.collaboratedBoards = 1;
							this.loadings.collaboratedBoardsSearch = true;
							this.textQueries.collaboratedBoards = event.target.value;
							this.boardSearchSubjects.collaborated.onNext(event.target.value);
						}
					},
					notifyThatSomethingError : function(message) {
						toastr.error(message);
					},
					notifyThatSomethingSuccess : function(message) {
						toastr.success(message);
					},
					handleError : function(error, callback) {
						var vm = this;
						if(error.status == 0) {
							vm.notifyThatSomethingError('Kelihataanya koneksi internet anda bermasalah');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 401) {
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}

						if(error.status == 400) {
							vm.notifyThatSomethingError('Mohon perbaiki isian form sesuai dengan pesan yang ada');
							if(typeof callback == 'function') {
								callback.bind(vm)(error);
							}
						}
					},
					handleValidationErrors : function(errors) {
						
						var vm = this;

						var params = ['title', 'description', 'tags'];

						params.forEach(function(param) {
							var paramError = errors.find(function(error) {
								return error.param == param
							})

							if(paramError != undefined) {

								vm.formsError.createBoard[param].error = true;
								vm.formsError.createBoard[param].message  = paramError.msg
							}
						})
					},
					resetFormErrorState : function(param) {
						this.formsError.createBoard[param].error = false;
					},
					resetAllFormErrorState : function() {
						var vm = this;

						var params = ['title', 'description', 'tags'];

						params.forEach(function(param) {
							vm.resetFormErrorState(param);
						})
					}
				},
				mounted : function() {
					var vm = this;

					toastr.options = {
					  "closeButton": false,
					  "debug": false,
					  "newestOnTop": false,
					  "progressBar": true,
					  "positionClass": "toast-bottom-right",
					  "preventDuplicates": true,
					  "onclick": null,
					  "showDuration": "300",
					  "hideDuration": "1000",
					  "timeOut": "5000",
					  "extendedTimeOut": "1000",
					  "showEasing": "swing",
					  "hideEasing": "linear",
					  "showMethod": "fadeIn",
					  "hideMethod": "fadeOut"
					}

					vm.inputs.tags =  $('#tagsinput');
					vm.inputs.tags.tagsinput({
						tagClass : 'btn btn-default btn-xs button-tags'
					});

					vm.inputs.tags.on('beforeItemAdd', function(event) {
						vm.resetFormErrorState('tags')
					});
						
					vm.modals.createBoardModal = $('#create-board-modal');
					vm.modals.createBoardModal.on('hidden.bs.modal', function() {
						vm.forms.createBoard.title = '';
						vm.forms.createBoard.description = '';
						vm.inputs.tags.tagsinput('removeAll');

						vm.resetAllFormErrorState();
					})
					
					vm.getCurrentUser()
						.then(function(data) {
							vm.getCurrentUserBoards();
							vm.getCollaboratedBoards();
							vm.getBookmarkedBoards();
						})

					vm.getAllBoards();

					vm.boardSearchSubscribtions.all = vm.boardSearchSubjects.all
						.debounce(250)
						.distinctUntilChanged()
						.subscribe(function() {
							
							vm.getAllBoards(vm.currentPage.allBoards)
								.then(function() {
									vm.loadings.allBoardsSearch = false;
								})
								.catch(function() {
									vm.loadings.allBoardsSearch = false;
									vm.notifyThatSomethingError('Kelihataanya Koneksi Anda Bermasalah');
								})
						});

					vm.boardSearchSubscribtions.currentUser = vm.boardSearchSubjects.currentUser
						.debounce(250)
						.distinctUntilChanged()
						.subscribe(function() {
							
							vm.getCurrentUserBoards(vm.currentPage.currentUserBoards)
								.then(function() {
									vm.loadings.currentUserBoardsSearch = false;
								})
								.catch(function() {
									vm.loadings.currentUserBoardsSearch = false;
									vm.notifyThatSomethingError('Kelihataanya Koneksi Anda Bermasalah');
								})
						});

					vm.boardSearchSubscribtions.bookmarked = vm.boardSearchSubjects.bookmarked
						.debounce(250)
						.distinctUntilChanged()
						.subscribe(function() {
							
							vm.getBookmarkedBoards(vm.currentPage.bookmarkedBoards)
								.then(function() {
									vm.loadings.bookmarkedBoardsSearch = false;
								})
								.catch(function() {
									vm.loadings.bookmarkedBoardsSearch = false;
									vm.notifyThatSomethingError('Kelihataanya Koneksi Anda Bermasalah');
								})
						});

					vm.boardSearchSubscribtions.collaborated = vm.boardSearchSubjects.collaborated
						.debounce(250)
						.distinctUntilChanged()
						.subscribe(function() {
							
							vm.getCollaboratedBoards(vm.currentPage.collaboratedBoards)
								.then(function() {
									vm.loadings.collaboratedBoardsSearch = false;
								})
								.catch(function() {
									vm.loadings.collaboratedBoardsSearch = false;
									vm.notifyThatSomethingError('Kelihataanya Koneksi Anda Bermasalah');
								})
						});

				}
			})
		})();